Проект написан на java 1.8 и Spring-Boot. Зависимости подтянуты с помощью Maven. Для оформления используется Bootstrap. В качестве обработчика шаблонов Freemarker.

База данных была использована H2, управление через JPA Hibernate.

В проекте папка backupDB, там лежит DUMP DB для PostgreSQL 12 и выгрузка в виде одного SQL файла и три таблицы по отдельности, а так же Description_ShemaDB.html с описанием схемы DB.

В проекте изначально используется Spring Security.
Чтобы попасть в функциональную часть требуется авторизация. Пользователь "u" пароль "1".
Страница авторизации позволяет добавить нового пользователя в БД. Если попытаться добавить уже существующего, то выведется, что пользователь существует. Если такого пользователя нет, то он будет создан. Пароли в БД на момент написания этой записки не шифруются.

После авторизации показывается приветственная страница. Есть четыре списка вверху. Справа можно посмотреть под каким пользователем выполнен вход и выйти по кнопке. В коде заложен функционал разграничения доступа по ролям. Например, для пользователя и админа. Полноценно этот функционал не реализован в части отличий в интерфейсе и возможностей.

Главная таблица с выводом таблицы "Прокат автомобилей". Если щелкнуть по автомобилю мы попадаем в таблицу, где отображаются данные проката по конкретному автомобилю и среднее время, какое автомобиль был в прокате согласно тех.задания.

---------------------

MVC предусматривает выдачу данных в любом формате по запросу. Достаточно незначительно модифицировать контроллер и шаблоны выдачи. Информацию можно отдавать в виде универсального готового html в виде страниц, как в этом проекте, или в виде html для запросов по AJAX (реализовано в этом проекте на примере отдачи таблицы с фильтром по машинам и динамичным запросом URL, где в качестве параметра выступает ID автомобиля). При этом обеспечивается концепция удобочитаемых URL, которые любят поисковики. Механизм авторизации не даст перепутать пользователя или подделать запрос от злоумышленника. 

На странице /rests демонстрируется пример REST API способ получения данных таблицы "Список арендаторов" (Customers) с помощью обращения к серверу по адресу /rest. Сервер отдает JSON и данные показываются в виде удобочитаемого списка из исходных данных с помощью Vue.js.

Описание REST API (дорабатывается)
Web-view по адресу /rests - на этой странице можно посмотреть в удобочитаемом виде результаты выдачи ответов сервера и отформатированные с помощью Vue.js. Кнопки EDit изменяет имя  (дорабатывается)

ОПИСАНИЕ API сервера:
Все ответы сервера приходят с адреса /rest в формате JSON.
Сейчас он отдает данные из таблицы Customers.
По запросу методом GET /rest/{id} отдается запись с id указанным в запросе.

(ДОРАБАТЫВАЕТСЯ)При обращении к серверу методом пут PUT, где в запросе
где "id записи" - id записи которую следует изменить(переименовать),
"message" - сообщение котрое будет присвоено указаному id.


 JSON [{"id":[id записи],"fullName":"message"}]

---------------------

Существенные недостатки и недоработки демонстрационного проекта, которые в реальном проекте нужно было бы устранить в первую очередь перед отдачей в эксплуатацию, связанные с безопасностью и стабильностью:

1. На поля ввода на уровне приложения не поставлены фильтры и возможна SQL-инъекция или ошибка в случае отправки в запросе неверных/поврежденных или подставленных злоумышленником данных, соответственно нет фильтра для защиты перед выводом в браузер от XSS атак.

2. Все управление базой данных отдано на управление JPA. В результате поля Id в таблице генерируются единым счетчиком, т.е. к примеру после записи в таблицу rentalcars с id 1, потом при записи в таблицу usr уже пишется 2, хотя таблица другая. Необходимо изменить тип генерации поля на, например, Sequence или отдать на управление самой базе. В реальном высоконагруженном приложении такие действия, возможно, лучше отдать БД. Не стал делать, так как это создало бы ненужный функционал отсутствующий в техзадании и не влияющий на функции, которые демонстрирует приложение.
Так же в таблицу пишутся числа в формате biginteger, что является избыточным для многих полей и в большом нагруженном проекте приведет к неоправданному расходу места и вычислительных ресурсов, необходимо более тонко настроить JPA или отдать управление этим БД.

3. Так же если вся логика управления данными отдана JPA, в программе отсутствует проверка, что при записи записываемые значения в rentalcars соответствуют значениям в соответствующих таблицах. В реальном проекте возможна потенциальная ошибка в процессе эксплуатации при усложнении функционала, например при обмене по JSON, или при действиях злоумышленников. Необходимо или передать эти проверки на уровень приложения, или на уровень БД с проверкой и выводом ошибок в лог в самом приложении.

4. На фронт на страницу main необходимо повесить проверку, что дата выдачи в аренду меньше даты возврата из аренды. При подсчете среднего времени аренды это проверяется, но во избежание проблем проверку надо повесить на момент примема  данных и записи в БД с уведомлением пользователя.

----------------------

Таблицы которые должны быть:
 
Таблица автомобили (cars):
1. Id - номер записи
2. марка автомобиля - вендор и модель
3. гос. номер автомобиля.

Основная таблица "Прокат автомобилей" (rental_cars)
1. id записи
2. Наименование автомобиля из таблицы Cars (в таблице хранится только id)
3. Дата взятия в прокат
4. Дата возврата из проката
5. ФИО арендатора из таблицы "Арендаторы" из таблицы customers (в таблице хранится только id)
6. Номер точки из которой последний раз был автомобиль или в которой находится из таблицы "Точки проката". Выводится наименование из таблицы RentalPoints (в таблице хранится только id)
7. гос номер берется из таблицы Cars (в таблице хранится только id)

таблица "Пункты проката" (rental_point)
1. id записи
2. Название точки соответствует названию города.

Таблица "Арендаторы" (customers)
1. id записи
2. ФИО арендатора

Еще есть таблица пользователей (usr) и ролей пользователей (user_role)

Для генерации первичных данных в таблицы cars, rental_cars и customers использовался сервис mockaroo.com. Данные в таблицу rental_cars заносились из формы ввода в проекте.