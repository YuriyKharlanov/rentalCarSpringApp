Проект написан на java 1.8 и Spring-Boot. Зависимости подтянуты с помощью Maven. Для оформления импользуется Bootstrap. В качестве обработика шаблонов Freemarker.

База данныхх была использована PostgreSQL, управление через JPA Hibernate.

В проекте изначально используется Spring Security.
Чтобы попасть в функциональную часть требуется автоизация. Пользователь "u" пароль "1".
Страница авторизации позволяет добавить нового пользователя в БД. Если попытаться добавить уже существующего, то выведется, что пользователь существует. Если такого пользователя нет, то он будет создан. Пароли в БД на момент написания этой записки не шифруются.

После авторизации показывается приветственная страница. Есть четыре списка вверху. Справа можно посмотреть под каким пользователем выполнен вход и выйти по кнопке. В коде заложен функцинал разграничения доступа по ролям. Например для пользователя и админа. Полноценно этот функционал не реализован.

Главная таблица с выводом таблицы "Прокат автомобилей". Если щелкнуть по автомобилю мы попадаем в таблицу где данные проката по конкретному автомобилю и среднее время, какое автомобиль был в прокате согласно тех.задания.

Что касается 4 пункта задания, то MVC предусматривает выдачу данных в любом формате по запросу. Достаточно незначительно модифицировать контроллер и шаблоны выдачи. Информацию можно отдавать в виде готового html в виде страниц, как в этом проекте, или в виде html для запросов по AJAX (реализовано в этом проекте на примере отдачи таблицы с фильтром и динамичным запросом, где в качестве параметра выступает ID автомобиля). При этом обеспечивается концепция удобочитаемых URL, которые любят поисковики. Механизм авторизации не даст перепутать пользователя или подделать запрос от злоумышленника. Легко модифицировать контроллер чтобы он отдавал данные к примеру в виде JSON или XML. Авторизация в таком случае делается по закрытому и открытому ключу. Если необходимо представить варианты выдачи в каком-то формате конкретно, готов модифицировать приложение.

---------------------

Существенные недостатки и недоработки демонстрационного проекта, которые в реальном проекте нужно было бы устранить в первую очередь перед отдачей в эксплуатацию, связанные с безопасностью и стабильностью:

1. На поля ввода на уровне приложения не поставлены фильтры и возможна SQL-инъекция или ошибка в случае отправки в запросе неверных/поврежденных или подставленных злоумышленником данных, соответственно нет фильтра для защиты перед выводом в браузер от XSS атак.

2. Все управление базой данных отдано на управление JPA. В результате поля Id в таблице генерируются единым счетчиком, т.е. к примеру после записи в таблицу rentalcars с id 1, потом при записи в таблицу usr уже пишется 2, хотя таблица другая. Необходимо изменить тип генерации поля на, например, Sequence или отдать на управление самой базе. в реальном высоконагруженном приложении такие действия, возможно, лучше отдать БД. Не стал делать, так как это создало бы ненужный функционал отсутствующий в техзадании и не влияющий на функции, которые демонстрирует приложение.
Так же в таблицу пишутся числа в формате biginteger, что является избыточным и в большом нагруженном проекте приведет к неоправданному расходу места, необходимо более тонко настроить JPA или отдать управление этим БД.

3. Так же если вся логика управления данными отдана JPA, в программе отсутствует проверка, что при записи записываемые значения в rentalcars соответствуют значениям в соответствующих таблицах. В реальном проекте возможна потенциальная ошибка в процессе эксплуатации при усложнении функционала или при действия злоумышленников. Необходимо или передать эти проверки на уровень приложения, или на уровень БД с проверкой и выводом ошибок в лог в самом приложении. 

4. На необходимо повесить проверку, что дата выдачи в аренду меньше даты возврата из аренды. При подсчете среднего времени аренды это проверяется, но во избежанеи проблем проверку надо повесить на момент отправки данных.

----------------------

Таблицы которые должны быть:
 
Таблица автомобили (cars):
1. Id - номер записи
2. марка автомобиля - вендор и модель
3. гос. номер автомобиля.

Основная таблица "Прокат автомобилей" (rental_cars)
1. id записи
2. Наименование автомобиля из таблицы Cars (в таблице хранится только id)
3. Дата взятия в прокат
4. Дата возврата из проката
5. ФИО арендатора из таблицы "Арендаторы" из таблицы customers (в таблице хранится только id)
6. Номер точки из которой последний раз был автомобиль или в которой находится из таблицы "Точки проката". Выводится наименование из таблицы RentalPoints (в таблице хранится только id)
7. гос номер берется из таблицы Cars (в таблице хранится только id)

таблица "Пункты проката" (rental_point)
1. id записи
2. Название точки соответствует названию города.

Таблица "Арендаторы" (customers)
1. id записи
2. ФИО арендатора

Еще есть таблица пользователей (usr) и ролей пользователей (user_role)

Для генерации первичных данных в таблицы cars, rental_cars и customers использовался сервис mockaroo.com. Данные в таблицу rental_cars заносились из формы ввода в проекте.